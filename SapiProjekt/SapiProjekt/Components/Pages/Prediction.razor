@page "/prediction"
@using System.Text.Json.Serialization
@using SapiProjekt.Models
@using SapiProjekt.Services
@inject BacLoaderService BacService
@inject HttpClient Http

<div class="card shadow-sm p-4">
    <button class="btn btn-primary mt-3" @onclick="RunPrediction">El≈ërejelz√©sek futtat√°sa</button>

    @if (predictionDone)
    {
        <div class="mt-4">
            <h5>El≈ërejelz√©sek a k√∂vetkez≈ë √©vre: @nextYear:</h5>
            <ul class="list-group">
                <li class="list-group-item d-flex justify-content-between">
                    <span>üá≠üá∫ Magyar di√°kok sz√°ma:</span>
                    <strong>@predictedCount</strong>
                </li>
                <li class="list-group-item d-flex justify-content-between">
                    <span>üìö √Åtlag jegy:</span>
                    <strong>@predictedAvgGrade.ToString("0.00")</strong>
                </li>
                <li class="list-group-item d-flex justify-content-between">
                    <span>‚úÖ √Åtmen√©si ar√°ny:</span>
                    <strong>@predictedPassRate.ToString("0.0")%</strong>
                </li>
            </ul>

            <div class="mt-4">
                <h6>El≈ëz≈ë √©vek adatai:</h6>
                <table class="table table-sm table-bordered">
                    <thead>
                    <tr>
                        <th>√âv</th>
                        <th>Magyar di√°kok sz√°ma</th>
                        <th>√Åtlag jegy</th>
                        <th>√Åtmen√©si ar√°ny</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var year in historicalData.Keys.OrderBy(y => y))
                    {
                        <tr>
                            <td>@year</td>
                            <td>@historicalData[year].HungarianCount</td>
                            <td>@historicalData[year].AverageGrade.ToString("0.00")</td>
                            <td>@historicalData[year].PassRate.ToString("0.0")%</td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>

@code {
    private int predictedCount;
    private double predictedAvgGrade;
    private double predictedPassRate;
    private int nextYear;
    private bool predictionDone = false;

    private Dictionary<int, YearlyStats> historicalData = new();

    private record YearlyStats(int HungarianCount, double AverageGrade, double PassRate);

    private async Task RunPrediction()
    {
        var grouped = BacService.Entries
            .Where(e => e.Nationality == "Maghiara")
            .GroupBy(e => e.Year)
            .ToDictionary(
                g => g.Key,
                g => new YearlyStats(
                    g.Count(),
                    g.Average(e => e.Avg),
                    100.0 * g.Count(e => e.Passed == 0) / g.Count()
                )
            );

        historicalData = grouped;
        var years = grouped.Keys.OrderBy(y => y).ToList();
        if (!years.Any())
        {
            predictionDone = false;
            return;
        }
        nextYear = years.Max() + 1;
        
        var response = await Http.PostAsJsonAsync("http://127.0.0.1:5000/predict", new { year = nextYear });
        if (response.IsSuccessStatusCode)
        {
            var prediction = await response.Content.ReadFromJsonAsync<PredictionResult>();
            predictedCount = (int)prediction.PredictedCount;
            predictedAvgGrade = prediction.PredictedAvgGrade;
            predictedPassRate = prediction.PredictedPassRate;
        }

        predictionDone = true;
    }
    

private record PredictionResult(
        [property: JsonPropertyName("predicted_count")] double PredictedCount,
        [property: JsonPropertyName("predicted_avg_grade")] double PredictedAvgGrade,
        [property: JsonPropertyName("predicted_pass_rate")] double PredictedPassRate
    );
}
