@page "/"
@using SapiProjekt.Models
@using SapiProjekt.Services
@inject BacLoaderService BacService

<div class="filter-bar bg-light p-3 rounded shadow-sm mb-4">
    <div class="d-flex flex-wrap align-items-end gap-3">
        <div>
            <label class="form-label mb-1"><strong>Év</strong></label>
            <select class="form-select" @bind="selectedYear">
                @foreach (var year in years)
                {
                    <option value="@year">@year</option>
                }
            </select>
        </div>

        <div>
            <label class="form-label mb-1"><strong>Megye</strong></label>
            <select class="form-select" @bind="selectedCounty">
                <option value="">Minden</option>
                @foreach (var county in counties)
                {
                    <option value="@county">@county</option>
                }
            </select>
        </div>

        <div class="d-flex align-items-end">
            <button class="btn btn-primary" @onclick="ApplyFilters">Frissítés</button>
        </div>
    </div>
</div>


@if (entries != null)
{
    <div class="table-container bg-light p-3 rounded shadow-sm mb-4">
        <table class="table table-hover table-striped table-bordered">
            <thead>
            <tr>
                <th>Diák kódja</th>
                <th>Iskola</th>
                <th>Megye</th>
                <th>Szak</th>
                <th>Átlag</th>
                <th>Átmenő</th>
                <th>Kötelező tantárgy</th>
                <th>Választott tantárgy</th>
                <th>Román nyelv és irodalom</th>
                <th>Anyanyelv</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var entry in entries)
            {
                <tr>
                    <td>@entry.Code</td>
                    <td>@entry.School</td>
                    <td>@entry.County</td>
                    <td>@entry.Specialization</td>
                    <td>@entry.Avg.ToString("0.00")</td>
                    <td>@(entry.Passed == 0 ? "Igen" : "Nem")</td>
                    <td>@entry.MandatoryGradeFinal</td>
                    <td>@entry.ChosenGradeFinal</td>
                    <td>@entry.RomanianGradeFinal</td>
                    <td>@entry.NativeGradeFinal</td>
                </tr>
            }
            </tbody>
        </table>

        <div class="d-flex justify-content-between align-items-center mt-3">
            <button class="btn btn-outline-secondary" @onclick="PrevPage" disabled="@(currentPage == 1)">
                <i class="bi bi-arrow-left-circle"></i> Előző
            </button>
            <span class="text-muted">@currentPage / @totalPages</span>
            <button class="btn btn-outline-secondary" @onclick="NextPage" disabled="@(currentPage == totalPages)">
                Következő <i class="bi bi-arrow-right-circle"></i>
            </button>
        </div>
    </div>

}

@code {
    private List<string> years = new();
    private List<string> counties = new();
    private List<BacEntry> allEntries = new();
    private List<BacEntry> entries;
    private string selectedYear;
    private string selectedCounty;

    private int currentPage = 1;
    private int pageSize = 100;
    private int totalPages;

    protected override void OnInitialized()
    {
        years = BacService.AvailableYears;
        selectedYear = years.FirstOrDefault();
        counties = BacService.Entries
            .Select(e => e.County)
            .Distinct()
            .OrderBy(c => c)
            .ToList();
    }

    private void ApplyFilters()
    {
        if (string.IsNullOrEmpty(selectedYear))
        {
            entries = new List<BacEntry>();
            totalPages = 0;
            return;
        }

        allEntries = BacService.Entries
            .Where(e => e.Year.ToString() == selectedYear
                     && (string.IsNullOrEmpty(selectedCounty) || e.County == selectedCounty))
            .ToList();

        currentPage = 1;
        RefreshPage();
    }

    private void RefreshPage()
    {
        totalPages = (int)Math.Ceiling((double)allEntries.Count / pageSize);
        entries = allEntries
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            RefreshPage();
        }
    }

    private void PrevPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            RefreshPage();
        }
    }
}
